# Build for the undefined behavior sanitizer runtime support library.

LOCAL_PATH:= $(call my-dir)

UBSAN_SOURCES := \
  ubsan_diag.cc \
  ubsan_init.cc \
  ubsan_flags.cc \
  ubsan_handlers.cc \
  ubsan_value.cc \

UBSAN_STANDALONE_SOURCES := \
  ubsan_init_standalone.cc \

UBSAN_CXX_SOURCES := \
  ubsan_handlers_cxx.cc \
  ubsan_type_hash.cc \
  ubsan_type_hash_itanium.cc \
  ubsan_type_hash_win.cc \

UBSAN_C_INCLUDES := \
  external/compiler-rt/lib \

UBSAN_CFLAGS := \
  -fno-builtin \
  -fno-exceptions \
  -fvisibility=hidden \
  -Wno-non-virtual-dtor \
  -Wno-sign-compare \

UBSAN_CFLAGS += -fno-rtti

UBSAN_STANDALONE_CFLAGS := \
  -fno-builtin \
  -fno-exceptions \
  -fvisibility=hidden \
  -Wno-non-virtual-dtor \
  -Wno-sign-compare \

UBSAN_STANDALONE_CFLAGS += -fno-rtti

UBSAN_CXXFLAGS := \
  -fno-builtin \
  -fno-exceptions \
  -fvisibility=hidden \
  -Wno-non-virtual-dtor \
  -Wno-sign-compare \

ifneq ($(HOST_OS),darwin)
include $(CLEAR_VARS)

LOCAL_MODULE := libubsan
LOCAL_CPP_EXTENSION := .cc
LOCAL_SRC_FILES := $(UBSAN_SOURCES)

#on darwin, libc++abi works if version 10.9 or greater
mac_sdk_cxxabi_broken := 10.8
ifeq ($(filter $(MAC_SDK_VERSION),$(mac_sdk_cxxabi_broken)),)
LOCAL_SRC_FILES += $(UBSAN_CXX_SOURCES)
endif

UBSAN_CXXFLAGS += -stdlib=libc++
LOCAL_CPPFLAGS := UBSAN_CXXFLAGS
LOCAL_C_INCLUDES := $(UBSAN_C_INCLUDES)
LOCAL_NDK_STL_VARIANT := none
LOCAL_SDK_VERSION := 19
LOCAL_SANITIZE := never
LOCAL_MODULE_TARGET_ARCH := arm arm64 x86
LOCAL_MULTILIB := both
include $(BUILD_STATIC_LIBRARY)


include $(CLEAR_VARS)
LOCAL_MODULE := libubsan
LOCAL_CPP_EXTENSION := .cc
LOCAL_SRC_FILES := $(UBSAN_STANDALONE_SOURCES)
LOCAL_CPPFLAGS := $(UBSAN_STANDALONE_CFLAGS)
LOCAL_STATIC_LIBRARIES := libsan
LOCAL_C_INCLUDES := $(UBSAN_C_INCLUDES)
LOCAL_NDK_STL_VARIANT := none
LOCAL_SDK_VERSION := 19
LOCAL_SANITIZE := never
LOCAL_MODULE_TARGET_ARCH := arm arm64 x86
LOCAL_MULTILIB := both
include $(BUILD_SHARED_LIBRARY)

else

include $(CLEAR_VARS)
LOCAL_MODULE := libubsan
LOCAL_CPP_EXTENSION := .cc
LOCAL_SRC_FILES := $(UBSAN_SOURCES)
LOCAL_CPPFLAGS := $(UBSAN_CXXFLAGS)
LOCAL_C_INCLUDES := $(UBSAN_C_INCLUDES)
LOCAL_NDK_STL_VARIANT := none
LOCAL_SDK_VERSION := 19
LOCAL_SANITIZE := never
LOCAL_MODULE_TARGET_ARCH := arm arm64 x86
LOCAL_MULTILIB := both
include $(BUILD_STATIC_LIBRARY)

include $(CLEAR_VARS)
LOCAL_MODULE := libubsan_cxx
LOCAL_CPP_EXTENSION := .cc
LOCAL_SRC_FILES := $(UBSAN_SOURCES)
LOCAL_SRC_FILES += $(UBSAN_CXX_SOURCES)
UBSAN_CXXFLAGS += -stdlib=libc++
LOCAL_CPPFLAGS := $(UBSAN_CXXFLAGS)
LOCAL_C_INCLUDES := $(UBSAN_C_INCLUDES)
LOCAL_NDK_STL_VARIANT := none
LOCAL_SDK_VERSION := 19
LOCAL_SANITIZE := never
LOCAL_MODULE_TARGET_ARCH := arm arm64 x86
LOCAL_MULTILIB := both
include $(BUILD_STATIC_LIBRARY)


include $(CLEAR_VARS)
LOCAL_MODULE := libubsan
LOCAL_CPP_EXTENSION := .cc
LOCAL_SRC_FILES := $(UBSAN_SOURCES)
LOCAL_CPPFLAGS := $(UBSAN_CXXFLAGS)
LOCAL_STATIC_LIBRARIES := libsan
LOCAL_C_INCLUDES := $(UBSAN_C_INCLUDES)
LOCAL_NDK_STL_VARIANT := none
LOCAL_SDK_VERSION := 19
LOCAL_SANITIZE := never
LOCAL_MODULE_TARGET_ARCH := arm arm64 x86
LOCAL_MULTILIB := both
include $(BUILD_SHARED_LIBRARY)

include $(CLEAR_VARS)
LOCAL_MODULE := libubsan_cxx
LOCAL_CPP_EXTENSION := .cc
LOCAL_SRC_FILES := $(UBSAN_SOURCES)
LOCAL_SRC_FILES += $(UBSAN_CXX_SOURCES)
UBSAN_CXXFLAGS += -stdlib=libc++
LOCAL_CPPFLAGS := $(UBSAN_CXXFLAGS)
LOCAL_STATIC_LIBRARIES := libsan
LOCAL_C_INCLUDES := $(UBSAN_C_INCLUDES)
LOCAL_NDK_STL_VARIANT := none
LOCAL_SDK_VERSION := 19
LOCAL_SANITIZE := never
LOCAL_MODULE_TARGET_ARCH := arm arm64 x86
LOCAL_MULTILIB := both
include $(BUILD_SHARED_LIBRARY)

endif

